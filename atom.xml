<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alive</title>
  
  <subtitle>Just Do IT!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.x-fei.me/"/>
  <updated>2017-11-06T05:10:10.000Z</updated>
  <id>http://blog.x-fei.me/</id>
  
  <author>
    <name>XFeiF</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hackx上海</title>
    <link href="http://blog.x-fei.me/2017/11/06/Hackx%E4%B8%8A%E6%B5%B7/"/>
    <id>http://blog.x-fei.me/2017/11/06/Hackx上海/</id>
    <published>2017-11-06T03:49:33.000Z</published>
    <updated>2017-11-06T05:10:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="东方明珠"><a href="#东方明珠" class="headerlink" title="东方明珠"></a>东方明珠</h3><p><img src="/images/OrientalPearlTower.png" alt="The Oriental Pearl Tower">  </p><a id="more"></a><h3 id="HACKxFDU"><a href="#HACKxFDU" class="headerlink" title="HACKxFDU"></a>HACKxFDU</h3><p><img src="/images/HACKxFDU.png" alt="HACKxFDU"></p><blockquote><p>Idea很重要！做一个有力的C位很重要！  </p></blockquote><p>人和动物的根本区别是会不会制造和使用工具。<br>人是一支有思想的芦苇。  </p><p>周五NodeX四人乘高铁到了上海，在那里度过了一个值得吐槽的周末。<br>对我个人而言，有很多收获。  </p><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><blockquote><p>人是一支有思想的芦苇。  </p></blockquote><p>这次去上海主要是参加 <em>2017 HACKx FDU</em> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a> </sup> 。主题是人工智能、金融科技、云服务和物联网。我们去的四个人，两个前端，我一个客户端，天天全可以。做应用不存在什么问题，但是AI算法是短板了，没有可以做的。但是这是黑客松啊，我理解的黑客松是 <em>现场idea</em> + <em>已有或现学的技术</em> ，所以周五就准备好鸽了，周末出去玩。  </p><p>还是想聊聊关键，A good idea！  </p><p>Without an idea, you are nothing at all.这话是有些夸张的，就是想突出idea的重要性。是的，没有好的Idea，一切都是扯淡。技术是优势，但不是全部！  </p><p>去现场的时候，认识了Luv Letter，然后后面两天看也稍微帮助他们做了一些事情。最开始的时候，他们有了想法，后面实施的时候，现学的nodejs写了后端。实际上，我们这边前后端写起来就是分分钟的事情。但是我们没有想法。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a> </sup>  </p><p>所以想法啊，真的很重要。人是一支有思想的芦苇，没有idea就是一台掌握了具体技术的机器。  </p><p>那么如何，有一个异于常人的新颖的想法？我也要去寻找答案。  </p><h3 id="打好C位，单C难赢"><a href="#打好C位，单C难赢" class="headerlink" title="打好C位，单C难赢"></a>打好C位，单C难赢</h3><blockquote><p>看新闻才知道S7总决赛SKT输了，Faker哭了，ADC Bang要背锅。</p></blockquote><p>SKT打兔子队的时候，1:2落后拿出瑞兹稳住Carry；打RNG的时候，拿出加里奥疯狂支援。一人扛起了一支队。但是打SSG的时候，Carry不动了，Bang失误太多。  </p><p>之前看一个主播xiaoxin玩《绝地求生大逃杀》的时候，带了三个队友，很菜的那种，最后加上他们共两支队伍6个人。xiaoxin不小心对枪死了，但是知道了对方的位置，然后指挥三个队友打。队友连枪都没对上，全跪了。  </p><p>打游戏的时候是这样的，想赢，别坑，该自己做的做好，Carry起来，一个人很难带的动的。<br>游戏之外也是这样。为什么说的是强强联合，而不是强弱联合？因为绝大多数的弱者没有合作的资格。从强者的角度来说，自然也是希望自己的合作对象是旗鼓相当的强者。（当然，互补是另外的说法，这里的强弱比较视具体情况看）  </p><p>所以，做好自己的C位，不是总有人来带你飞。  </p><h3 id="大道朝天"><a href="#大道朝天" class="headerlink" title="大道朝天"></a>大道朝天</h3><p>除了没有写自己的项目之外，在现场听到IBM，上汽，图森，高盛的人员和复旦教授谈AI。收获还是蛮大的。  </p><blockquote><p>核心的竞争力还是算法。只有掌握了道的本质和精髓才能永远游刃有余。  </p></blockquote><p>所以，更加坚定而且有了足够的鸡汤陪我走下一程了。</p><div class="footnotes"><ol><br>    <li class="footnote" id="fn:1"><br>        <p>第二届复旦大学创客马拉松 <a href="#fnref:1" title="hackx FDU"> </a></p><p><br>    </p></li><br>    <li class="footnote" id="fn:2"><br>        <p>然后周五晚上鸽了之后去吃海底捞的路上，我吐槽说，你们这些都是BAT的败类 🙃。 <a href="#fnref:2" title="hackx FDU"> </a></p><p><br>    </p></li><br></ol></div> <script type="text/javascript">    $.bigfoot();</script><script type="text/javascript">    var bigfoot = $.bigfoot({        deleteOnUnhover: false,        preventPageScroll: false,        hoverDelay: 250,    });</script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;东方明珠&quot;&gt;&lt;a href=&quot;#东方明珠&quot; class=&quot;headerlink&quot; title=&quot;东方明珠&quot;&gt;&lt;/a&gt;东方明珠&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/OrientalPearlTower.png&quot; alt=&quot;The Oriental Pearl Tower&quot;&gt;  &lt;/p&gt;
    
    </summary>
    
    
      <category term="出行" scheme="http://blog.x-fei.me/tags/%E5%87%BA%E8%A1%8C/"/>
    
      <category term="HACKx" scheme="http://blog.x-fei.me/tags/HACKx/"/>
    
  </entry>
  
  <entry>
    <title>技术分为术和道两种</title>
    <link href="http://blog.x-fei.me/2017/10/01/%E6%8A%80%E6%9C%AF%E5%88%86%E4%B8%BA%E6%9C%AF%E5%92%8C%E9%81%93%E4%B8%A4%E7%A7%8D/"/>
    <id>http://blog.x-fei.me/2017/10/01/技术分为术和道两种/</id>
    <published>2017-10-01T07:07:21.000Z</published>
    <updated>2017-10-01T08:29:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>2017年9月回顾。<br><a id="more"></a></p><blockquote><p>技术分为术和道两种，具体的做事方法是术，做事的原理和原则是道。术会从独门绝技到普及再到落伍，追求术的人会很辛苦，只有掌握了道的本质和精髓才能永远游刃有余。 ​</p></blockquote><p>上面这句话引用自吴军先生的《数学之美》。思索了很久，然后17年整个9月就在二者之间作出了我目前认为的最合适的决定。  </p><h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><p>7月25号，拖了很久的一个项目写完了。然后准备秋招。还是想做移动应用开发。而对于Android而言，虽然Java算比较熟悉的了，但是看了一下面经，要看的书太多了，而且入门门槛低，现在基本饱和了吧。正式转iOS开发。  </p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>一周看了两本书，OC以及iOS编程，但是没有真机，只能在模拟器上运行。<br>8月开始，花了7-10天吧，实践加学习Swift3。<br>13号去上海，学校安排的实习。期间又写了一段时间的Java，感觉很浪费时间。所以这段时间算是一直咸鱼了，想做的事没有做好的，就断断续续地刷剑指Offer，然后完美错过阿里秋招！！！！！<br>就很迷，不知道去哪里找这些公司的校招信息，后面才了解到牛客网有一个专门的板块做这个的。<br>8月30号回长沙，开始读《Effective Objective-C》和《Objective-C 高级编程》，继续刷《剑指Offer》。<br>月末的时候写了自己的简历。</p><h3 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h3><p>从9月8号开始，一直笔试到14号，每天在1到2场之间。重点关注的是京东、新美大、网易、头条以及腾讯。其余的公司全当练手。笔试过程中三点不爽。一是网络和操作系统我看的太少了，准备太不充分，而且一开始看书实在是太慢了，应该看快一点，多看几遍。二是我投递的iOS岗，不得不去答一堆C++的题目，然后就被虐的很惨。三是编程，弱鸡还是弱鸡。不过还好，基本2题的话，1.5A，3题有2A。  </p><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><p>网申的速度都比较慢。第一家面试的公司（富途证券），算是腾讯系的公司，技术团队挺好的。前一天晚上参加完线下笔试，第二天就去面试了。一上午两轮技术+HR面结束。感觉很糟糕，毕竟第一次面。然而就是这家公司，在后来给我发了offer。<br>面试的第二家公司，百度。。。。没错，就是百度了，霸面的。前文提到过，这里就不说了。<br>趋势科技面试。由于不太了解，而且说好的视频面试，面试官自己的摄像头一片黑。就很尴尬，然后面了一面就结束了。<br>面试的第四家公司，今日头条。头条给我面试邀请的邮件还是意料之外的，因为头条的笔试题我记得我做的一般，花了比较多的功夫在拓展题上，然后编程题就sb了。面了两轮技术面，面试官都是比较年轻的帅小哥，二面感觉不太好吧，提到很多我没来得及深入研究的东西。所以我只能说一点半点。然后我问了头条现在是用什么来写的，还是OC，还是Swift，还是混编。最重要的一点没有问，什么时候给回复。所以二面结束，他说让我等HR通知。等到现在，估计没戏了。<br>最后27号，网易面试，但是我后面由于时间和票的原因，通知校招组，我放弃了面试，官网的招聘状态也变成了灰色的放弃面试状态。  </p><p>我本科的面试之旅大概就到这里了。当然后面腾讯来长沙的话，通知面试的话去面一下，笔试没过就去霸面～</p><h3 id="推免"><a href="#推免" class="headerlink" title="推免"></a>推免</h3><p>面试头条的时候，莫名其妙有了推免资格（中间发生了一些“有趣”的故事），但是还处于可以放弃的阶段，这时候还没有Offer，比较着急，就没有放弃推免的名额。然后先投了中山和哈工大深研院。后面想了很多，做技术，做学术，赚钱，女朋友。。。等等等等，然后我就文章开头的话做了一番思想斗争后，决定为了更多的💰，去读研。  </p><h3 id="中山"><a href="#中山" class="headerlink" title="中山"></a>中山</h3><p>之后去了中山参加复试，联系了导师，然后基本上就定下来了。但是报名比较晚了，复试成绩也一般，只有专硕了。学费贵，奖学金少。  </p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>这个月，一开始路越走越窄，后面路越走越宽。但是，即使路宽了，还是只能选一条。选一条，否定了别的路，感觉就否定了别的自己。就很难受，很失落。但是长远来看，本科毕业，工作强度高，拿到的年薪一般（除了头条），两年后的成长空间，一般而言，大概涨不到50%，遇到瓶颈可能早一点。花两年，做一笔投资，学历+高起薪，发展前景还是可观的。其实所有的发展都是看个人能力的，能力到了，瓶颈便不复存在。能力不够，投资再多也是有去无回。所以，大四&amp;后两年。过上高三的生活吧！既然否定了其他的自己，决定走这条路，那就全力以赴，奔跑下去～  </p><p><strong>Flag：三年后不后悔。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年9月回顾。&lt;br&gt;
    
    </summary>
    
    
      <category term="思考" scheme="http://blog.x-fei.me/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>Canton Tower</title>
    <link href="http://blog.x-fei.me/2017/09/26/Canton-Tower/"/>
    <id>http://blog.x-fei.me/2017/09/26/Canton-Tower/</id>
    <published>2017-09-26T14:53:13.000Z</published>
    <updated>2017-10-01T06:01:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="广州塔"><a href="#广州塔" class="headerlink" title="广州塔"></a>广州塔</h3><p><img src="/images/tower.png" alt="Canton Tower"><br><a id="more"></a>  </p><h3 id="初见-广州"><a href="#初见-广州" class="headerlink" title="初见-广州"></a>初见-广州</h3><p>23号去广州参加中山大学的研究生推免复试。之前请崔哥帮我把申请材料都寄过去了。但是没有参加夏令营，所以只能现在去参加复试。<br>不过听同学介绍面试很水，而且我并没有做什么准备，所以也就随缘了。<br>从长沙坐了一夜的火车，早上7点20左右到的广州。离家越来越远了。<br>广州地处亚热带，比长沙还要热上几分。虽然才7点多，但是已经感受到广州的热情了。<br>体验了一下一线城市的发达地铁交通，进站可刷支付宝买地铁票，要方便很多。<br>地铁来了之后，提着箱子的我有点傻眼，比我们的校车要挤上很多。我担心提着箱子不好上车，后面发现想多了，等我站到门口的位置，自动被后面的人挤上了车。<br>坐上地铁感觉比较新鲜的是，广州地铁上播放着三种语言：普通话、粤语以及英语。然后自己心里跟着默默学了几句，“下一站……”，蛮有趣的哈哈哈。<br>倒了三班地铁到番禺区大学城北站，一路边走边在手机上找了一个旅店。  </p><h3 id="机试与面试"><a href="#机试与面试" class="headerlink" title="机试与面试"></a>机试与面试</h3><p>23号晚上6点去中山签到，做了机试两道模拟题然后回去休息了。<br>24号正式机试，然后很惨。下午面试，又被怼了一波算法，图像处理和概率论。  </p><h3 id="小蛮腰"><a href="#小蛮腰" class="headerlink" title="小蛮腰"></a>小蛮腰</h3><p>晚上去小蛮腰那边逛了逛，穷，所以没上去。只在下面拍了许多照片。<br>近处要拍只能拍塔，拍人物照比较难，只能很尴尬地自拍，照片就不放上来了。  </p><h3 id="岭南（大学）学院"><a href="#岭南（大学）学院" class="headerlink" title="岭南（大学）学院"></a>岭南（大学）学院</h3><p>中山一个很奇特的院，搞经济的，很有钱。<br>上一届的一个学长，跨专业来了岭南读金融。带我们参观中山北校区，主要是岭南学院的诸多建筑，以及真的很有钱，真的很牛X。<br>其实这些我并不在意，因为阶级差距比较大了，扯不到一起。<br>聊到IT与赚钱，学长提到他在广州的一个同学，本科毕业7000，在广州只能满足基本的衣食住行。买房什么不存在的。<br>我想到自己拿到的一份offer，深圳的，12000，大概每个月有三四千的结余吧。呵呵。<br>所以想赚钱，套路很多，靠自己去发掘了，这个不好分享也无法再现。<br>然后坚定了我读研的一个信心，为了毕业了能有一份30W+的年薪。不能说爱💰或者不爱💰，因为这个社会生存的物质水平提高了，想去做自己喜欢的事，想做贡献，先满足自己。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;广州塔&quot;&gt;&lt;a href=&quot;#广州塔&quot; class=&quot;headerlink&quot; title=&quot;广州塔&quot;&gt;&lt;/a&gt;广州塔&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/tower.png&quot; alt=&quot;Canton Tower&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="出行" scheme="http://blog.x-fei.me/tags/%E5%87%BA%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>武汉一行</title>
    <link href="http://blog.x-fei.me/2017/09/20/%E6%AD%A6%E6%B1%89%E4%B8%80%E8%A1%8C/"/>
    <id>http://blog.x-fei.me/2017/09/20/武汉一行/</id>
    <published>2017-09-20T02:57:05.000Z</published>
    <updated>2017-10-01T04:59:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>9月17号，和宏伟去武汉工程大学流芳校区考PAT（Programming Ability Test），以及宏伟傍晚去百度的面试，然后赶晚上的火车，应该可以在18号凌晨回到寝室～。<br>然而，计划始终赶不上变化。<br><a id="more"></a><br>16号宏伟接到百度的面试通知，想多点时间复习，然后我们退了火车改坐高铁。晚上我背Dijkstra到1点多，然后睡觉。  </p><hr><h3 id="9-17-PAT不及格的菜🐔"><a href="#9-17-PAT不及格的菜🐔" class="headerlink" title="9.17-PAT不及格的菜🐔"></a>9.17-PAT不及格的菜🐔</h3><p>早上8点出发去长沙南站，中午到武汉站。然后武汉站距离那个流芳校区挺远的，坐公交地铁要转两三次，估计时间有点玄，二人打的到流芳校区。吃完午饭，大概1点10分，等开场。  </p><p>一直到开考前1分钟才开的门，那时候就有预感可能会延迟。<br>但是没想到，预计1点30开考，先推迟到1点45。1800+人，加上弃考的很多，它们的服务器就承受不了了，刷一个页面刷两三分钟都刷不出来。<br>从1点45推迟到2点45分，我闲着没事，把Dijkstra写了出来备用。<br>开考后三题，第一题20分，拿了17分；两题25分，一道16分，一道2分；最后一道30分，21分。最终得分：56分。<br>。。。。。。<br>末了看了一下Rank，100分的一堆了。于是再次证明自己的算法是如何的菜了。  </p><p>宏伟为了赶百度的面试，做了一半时间就提前走了，67分。 </p><p>我到光谷广场，等到了面完回来的宏伟以及前一天到武汉的崇哥。三人去吃了晚饭，后面在小猪短租上找了一家民宿住了一晚。<br>悲伤的是，我除了带了一个外套防止冷，别的衣物都没有带。所以只是洗了个澡，衣服没有换。  </p><hr><h3 id="9-18-尝试"><a href="#9-18-尝试" class="headerlink" title="9.18-尝试"></a>9.18-尝试</h3><p>宏伟昨天走的急，我陪他回流芳校区取落下的身份证。取完到洪山广场已经11点多了。<br>随便找了一家东北饺子馆，点了三两饺子，太咸，吃了二两。<br>吃完到地铁站找了个KFC，点了两杯可乐，打算坐一下午。<br>崇哥下午一点多的时候找到我们，然后准备3点到5点参加凡普金科的在线笔试。<br>笔试就很顺利，大概50分钟，算法题全A交卷。<br>4点多，到洪广大酒店。我去附近打印店打印简历。然后鼓足了勇气，把自己简陋的简历交给了百度的HR。  </p><p>和HR的简短的谈话也很有意思（写这个的时候20号，突然收到今日头条的面试邀请）。<br>百度HR问我要投递什么岗位，我说移动应用开发。之前我在百度招聘网站上看到招的确实少。然后HR小姐姐就委婉地告诉我，这个职位招的比较少。所以招的人都是比较TOP的。（我内心独白：。。。我这菜鸡没什么机会了）。问我能不能转别的职位，我说我试试。交了简历道了声谢谢。出门等宏伟面试结束。期间接到百度电话，通知我说第二天面试，具体时间晚点短信邮件通知。  </p><p>在小猪短租上又找了一家民宿住了一晚。依旧没有换衣服，我把T恤洗了，换了小褂子。<br>和宏伟、崇哥讨论了一晚上的计算机网络、操作系统，涨了一波知识。<br>先是接到邀请面试的电话，晚上睡着之后收到通知面试的短信和邮件，帮我转了开发测试岗。时间安排在第二天下午1点30分，下午第一个。  </p><hr><h3 id="9-19-霸面百度"><a href="#9-19-霸面百度" class="headerlink" title="9.19-霸面百度"></a>9.19-霸面百度</h3><p>上午在民宿待到11点，出门后吃了简餐，直奔洪广大酒店。<br>签完时，前台让我1点20再上去。<br>我等到1点16分的时候坐电梯先上去。上电梯的时候，前面一个30左右的男子，按了去12楼的电梯。<br>问我去几楼，我说12楼。<br>问我是不是去面试的，我说是的。<br>问我叫什么名字，我说。。。<br>然后他笑了一下，说我是你面试官。<br>我。。。。。。<br>然后因为没有到时间，所以他说1点30再开始。<br>等到1点29，进门。<br>开始怼问题。面的是测试岗，但是显然我没有做这方面的准备。<br>我以为一面就是算法+基础知识。但是这个面试官问了我一堆项目。<br>算法还是太虚，在面试官引导下才做出来。<br>有一个我印象比较深的问题：如何获得APP的启动时间。<br>我想的是尽可能准确。于是提了两个方案，一是在时间戳，二是利用Instruments里的timer工具。<br>一直让我扩散思维。<br>结果最后他自己举例：打秒表，多次取平均值；录屏，可以精确到帧。<br>ORZ。  </p><p>不是特别愉快，感觉自己像个SB。   </p><p>之后和宏伟分手，我先回长沙，他还有一面。  </p><hr><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>第一次霸面，没有底气没有信心，有点傻里傻气的不知天高地厚的勇气。想着不能白来一趟武汉啊，总得有点收获！挺卑微的。但是一想到自己已经一无所有了，机会是自己争取的，被刷也没有什么遗憾，毕竟尝试过了，知道自己还有很多需要提高的地方，以后再来过。想到这辈子还有好多事情没有做，好多地方没有去，好多风景没有看，好多有趣的人等着我去认识，以及，更好的我在未来等我一步一步靠近。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;9月17号，和宏伟去武汉工程大学流芳校区考PAT（Programming Ability Test），以及宏伟傍晚去百度的面试，然后赶晚上的火车，应该可以在18号凌晨回到寝室～。&lt;br&gt;然而，计划始终赶不上变化。&lt;br&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://blog.x-fei.me/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="感想" scheme="http://blog.x-fei.me/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Swift 3 Algorithm: 二叉搜索树</title>
    <link href="http://blog.x-fei.me/2017/09/04/Swift-3-Algorithm-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://blog.x-fei.me/2017/09/04/Swift-3-Algorithm-二叉搜索树/</id>
    <published>2017-09-04T07:02:56.000Z</published>
    <updated>2017-09-05T10:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有趣的 <code>Swift 3</code> 算法。  </p></blockquote><p><em>今天分享用swift3实现在二叉搜索树中递归搜索某一个特定的值！</em><br>这个算法没有什么难度，了解二叉搜索树的性质 + 递归搜索 + swift基础语法 即可完成！  </p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>打开XCode，新建Playground，创建searchBinaryTreeDemo。  </p><h3 id="样例树"><a href="#样例树" class="headerlink" title="样例树"></a>样例树</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//              9</span></span><br><span class="line"><span class="comment">//            /   \</span></span><br><span class="line"><span class="comment">//           6     10</span></span><br><span class="line"><span class="comment">//          / \     \</span></span><br><span class="line"><span class="comment">//         5   7     11</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="创建结点"><a href="#创建结点" class="headerlink" title="创建结点"></a>创建结点</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> leftChild: <span class="type">Node</span>?</span><br><span class="line">    <span class="keyword">var</span> rightChild: <span class="type">Node</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(value: <span class="type">Int</span>, leftChild: <span class="type">Node</span>?, rightChild:<span class="type">Node</span>?) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">        <span class="keyword">self</span>.leftChild = leftChild</span><br><span class="line">        <span class="keyword">self</span>.rightChild = rightChild</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子结点为可选类型！   </p><h3 id="构建样例树"><a href="#构建样例树" class="headerlink" title="构建样例树"></a>构建样例树</h3><p>下面利用上面的<code>Node</code>结构创建样例树<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// left branch</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fiveNode = <span class="type">Node</span>(value: <span class="number">5</span>, leftChild: <span class="literal">nil</span>, rightChild: <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">let</span> sevenNode = <span class="type">Node</span>(value: <span class="number">7</span>, leftChild: <span class="literal">nil</span>, rightChild: <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">let</span> sixNode = <span class="type">Node</span>(value: <span class="number">6</span>, leftChild: fiveNode, rightChild: sevenNode)</span><br><span class="line"></span><br><span class="line"><span class="comment">// right branch</span></span><br><span class="line"><span class="keyword">let</span> elevenNode = <span class="type">Node</span>(value: <span class="number">11</span>, leftChild: <span class="literal">nil</span>, rightChild: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tenNode = <span class="type">Node</span>(value: <span class="number">10</span>, leftChild: <span class="literal">nil</span>, rightChild: elevenNode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nineRootNode = <span class="type">Node</span>(value: <span class="number">9</span>, leftChild: sixNode, rightChild: tenNode)</span><br></pre></td></tr></table></figure></p><h3 id="实现算法"><a href="#实现算法" class="headerlink" title="实现算法"></a>实现算法</h3><p>中序遍历～<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3 .</span></span><br><span class="line"><span class="comment">// 实现算法，在这棵树中寻找一个特定的值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(<span class="number">_</span> node: Node?, <span class="number">_</span> searchValue: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> node?.value == searchValue &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node?.value)! &gt; searchValue &#123;</span><br><span class="line">        <span class="keyword">return</span> search(node?.leftChild, searchValue)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> search(node?.rightChild, searchValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>我们分别调用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search(inieRootNode, <span class="number">5</span>)</span><br><span class="line">search(inieRootNode, <span class="number">6</span>)</span><br><span class="line">search(inieRootNode, <span class="number">11</span>)</span><br><span class="line">search(inieRootNode, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>可以观察到<code>playground</code>右侧面板中，函数的递归执行次数:<br>5-&gt;2次、6-&gt;1次、11-&gt;2次、0-&gt;3次。  </p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们知道二叉树搜索的效率是log(n)。<br>可以通过在上述二叉搜索树的中序列表中搜索来比较。  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// efficiency  </span></span><br><span class="line"><span class="keyword">let</span> list = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"><span class="keyword">let</span> index0 = list.index(<span class="keyword">where</span>: &#123;$<span class="number">0</span> == <span class="number">0</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> index5 = list.index(<span class="keyword">where</span>: &#123;$<span class="number">0</span> == <span class="number">5</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> index6 = list.index(<span class="keyword">where</span>: &#123;$<span class="number">0</span> == <span class="number">6</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> index11 = list.index(<span class="keyword">where</span>: &#123;$<span class="number">0</span> == <span class="number">11</span>&#125;)</span><br></pre></td></tr></table></figure><p>可以在右侧面板中看到对于不存在的元素，二叉搜索树需要搜索三次，而for循环则需要7次。对于元素11，二叉搜索树需要搜索2次，for循环依然需要11次。  </p><p>本文除了帮助理解二叉搜索树，它的效率之外，还需要了解swift可选值的解析～  </p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有趣的 &lt;code&gt;Swift 3&lt;/code&gt; 算法。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;今天分享用swift3实现在二叉搜索树中递归搜索某一个特定的值！&lt;/em&gt;&lt;br&gt;这个算法没有什么难度，了解二叉搜索树的性质 + 递归搜索 + swift基础语法 即可完成！  &lt;/p&gt;
&lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;p&gt;打开XCode，新建Playground，创建searchBinaryTreeDemo。  &lt;/p&gt;
&lt;h3 id=&quot;样例树&quot;&gt;&lt;a href=&quot;#样例树&quot; class=&quot;headerlink&quot; title=&quot;样例树&quot;&gt;&lt;/a&gt;样例树&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//              9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//            /   \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//           6     10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//          / \     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//         5   7     11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://blog.x-fei.me/tags/swift/"/>
    
      <category term="algorithm" scheme="http://blog.x-fei.me/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Swift 3 Fun Algorithms: Filter, Map, Reduce Higher Order Functions</title>
    <link href="http://blog.x-fei.me/2017/09/04/Swift-3-Fun-Algorithms-Filter-Map-Reduce-Higher-Order-Functions/"/>
    <id>http://blog.x-fei.me/2017/09/04/Swift-3-Fun-Algorithms-Filter-Map-Reduce-Higher-Order-Functions/</id>
    <published>2017-09-04T02:01:52.000Z</published>
    <updated>2017-09-04T07:03:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有趣的 <code>Swift 3</code> 算法。</p></blockquote><p>今天分享几个Swift Higher Order Functions 给大家。<br>主要是 <code>Filter</code>、<code>Map</code>、<code>Reduce</code>。<br><a id="more"></a></p><p>Higher Order Functions(高阶函数<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a> </sup>)。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>打开XCode，新建Playground，创建WordsWithCharCountDemo。  </p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p><strong>[1, 2, 3, 4, 3, 3]  -&gt; (filter into)  [3, 3, 3]  or  -&gt; [2, 4]（偶数）</strong>  </p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>我们当然可以通过For循环来完成这样的功能<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a> </sup>，但是有的时候，我们想要得到的是<code>let</code> 的 不可变的数组，这个时候，我们可以借助<code>filter</code>函数。  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filtered = numbers.<span class="built_in">filter</span>(&#123; <span class="keyword">return</span> $<span class="number">0</span> == <span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line">filtered</span><br></pre></td></tr></table></figure><p>在filter函数中我们创建了一个<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html" target="_blank" rel="noopener">闭包表达式</a>，详细的闭包表达式知识就不在本文中多说了。该表达式完成的工作就是比较传递进来的参数和3的值，相等则返回<code>true</code>，而<code>filter</code>则根据判断返回合适的参数值。  </p><p>同样的，若想得到<code>[2,4]</code>的话，可以修改闭包表达式，<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> filtered = numbers.<span class="built_in">filter</span>(&#123;<span class="keyword">return</span> $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h4><p><strong>用map转换[1, 2, 3, 4] -&gt; [2， 4， 6， 8]</strong>  </p><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> transformed = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].<span class="built_in">map</span>(&#123;<span class="keyword">return</span> $<span class="number">0</span> * <span class="number">2</span>&#125;)</span><br><span class="line">transformed</span><br></pre></td></tr></table></figure><p>依然是利用简化的闭包表达式，返回参数*2。</p><h4 id="map-与-filter"><a href="#map-与-filter" class="headerlink" title="map 与 filter"></a>map 与 filter</h4><p>这里有必要提一下map与filter的区别。<br>map意为映射，就是将原有的参数通过某种方式映射成为另一个值；<br>而filter意为过滤，就是通过一定的条件，将满足该条件的值筛选出来。  </p><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h3><h4 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h4><p><strong>用reduce实现累加数组 [1, 2, 3, 4]-&gt; 10</strong>  </p><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].<span class="built_in">reduce</span>(<span class="number">0</span>, &#123;sum, number <span class="keyword">in</span> sum+number&#125;)</span><br><span class="line">sum</span><br></pre></td></tr></table></figure><p>这里<code>reduce</code>函数的<a href="https://developer.apple.com/documentation/swift/uint8.words/2926485-reduce" target="_blank" rel="noopener">官方定义</a>：  </p><pre><code class="swift"><span class="function"><span class="keyword">func</span> <span class="title">reduce</span>&lt;Result&gt;<span class="params">(<span class="number">_</span> initialResult: Result, <span class="number">_</span> nextPartialResult: <span class="params">(Result, UInt)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Result</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">Result</span></code></pre><p>联系reduce的意思可以知道，该方法从一序列的数创造出一个单一的值。例如，获取数组中数的和、乘积等。<br><code>initialResult</code>是一个初始化的值，类似于用<code>for</code>循环时先初始化<code>sum = 0</code>或者<code>produce = 1</code>。  </p><p>闭包表达式中：<br>两个参数，<code>Result</code> 与 调用<code>reduce</code>的数组元素，抛出的则是结果，因此是 <code>sum + number</code>而不是<code>sum = sum + number</code>。  </p><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>这三个函数在理解之后都不难，而且和<code>for循环</code>相比，相当简洁高效！<br>感谢看完本文！希望你有所收获！:)</p><div class="footnotes"><ol><br>    <li class="footnote" id="fn:1"><br>        <p>A higher-order functional language is one in which a function may be used as a value, just like an integer or a boolean. That is, the value of a variable may be a function, and a function may take a function as argument and may return a function as a result.<br>        一个高阶函数是指该函数可以被当作变量类型一样来使用。就是说变量可能是函数，一个函数可能会把另一个函数作为参数或者返回值是一个函数类型！ <a href="#fnref:1" title="Higher Order Functions"> </a></p><p><br>    </p></li><br>    <li class="footnote" id="fn:2"><br>        <p>For循环也可以完成下面要讲的map与reduce，下文就不再提及 <a href="#fnref:2" title="Powerful FOR LOOP "> </a></p><p><br>    </p></li><br></ol></div> <script type="text/javascript">    $.bigfoot();</script><script type="text/javascript">    var bigfoot = $.bigfoot({        deleteOnUnhover: false,        preventPageScroll: false,        hoverDelay: 250,        activateOnHover: true,    });</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有趣的 &lt;code&gt;Swift 3&lt;/code&gt; 算法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天分享几个Swift Higher Order Functions 给大家。&lt;br&gt;主要是 &lt;code&gt;Filter&lt;/code&gt;、&lt;code&gt;Map&lt;/code&gt;、&lt;code&gt;Reduce&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://blog.x-fei.me/tags/swift/"/>
    
      <category term="algorithm" scheme="http://blog.x-fei.me/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Swift 3 Fun Algorithms:Wrapping Array</title>
    <link href="http://blog.x-fei.me/2017/09/03/Swift-3-Fun-Algorithms-WrappingArray/"/>
    <id>http://blog.x-fei.me/2017/09/03/Swift-3-Fun-Algorithms-WrappingArray/</id>
    <published>2017-09-03T02:21:26.000Z</published>
    <updated>2017-09-04T07:03:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有趣的 <code>Swift 3</code> 算法。</p></blockquote><p>在<code>Youtube</code>上看到Swift3 的一个小算法，觉得很有趣！介绍给大家～  </p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>现在打开网易云音乐，选取一个歌单打开，从中选取一首歌，点击播放。若是循环模式，那么播放歌曲的顺序应该是：当前这首歌 -&gt; 下面的所有歌 -&gt; 当前这首歌上面的歌。<br>抽象出来就是： 对于数组<code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</code>， 选取”c”，输出 <code>[ &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;a&quot;, &quot;b&quot;]</code> 。  </p><h4 id="实现1"><a href="#实现1" class="headerlink" title="实现1"></a>实现1</h4><p>新建Playground，GeneratePlayList<br><a id="more"></a></p><pre><code class="swift"><span class="comment">// 假设我们有一个歌单tracks</span><span class="keyword">let</span> tracks = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>]<span class="comment">// 如果我们选择了"d",算法应该返回下面这个播放列表  </span>[<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]  <span class="comment">// 选中歌曲</span><span class="keyword">let</span> selectedTrack = <span class="string">"d"</span><span class="comment">// 新建播放列表</span><span class="keyword">var</span> playList = [<span class="type">String</span>]()  <span class="comment">// 所选歌曲之前的歌曲列表</span><span class="keyword">var</span> priorTracks = [<span class="type">String</span>]()<span class="comment">// for循环加入列表  </span><span class="keyword">for</span> track <span class="keyword">in</span> tracks {    <span class="built_in">print</span>(track)    <span class="keyword">if</span> track == selectedTrack || playlist.<span class="built_in">count</span> &gt; <span class="number">0</span>{        playlist.append(track)    } <span class="keyword">else</span> {        priorTracks.append(track)    }}playListpriorTracks<span class="comment">// 加在一起</span>playList + priorTracks</code></pre><h4 id="实现2"><a href="#实现2" class="headerlink" title="实现2"></a>实现2</h4><p>这次，不用<code>for循环</code>，利用Swift的<code>Array</code>的一些函数。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a> </sup>   </p><p>这里联系应用场景，我们可能需要用的函数包括，找一个元素的index，获得子序列</p><pre><code class="swift"><span class="comment">// 假设我们有一个歌单tracks</span><span class="keyword">let</span> tracks = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>]<span class="comment">// 如果我们选择了"d",算法应该返回下面这个播放列表  </span>[<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]  <span class="comment">// 选中歌曲</span><span class="keyword">let</span> selectedTrack = <span class="string">"d"</span><span class="comment">// 这里可以用array的index的许多方法</span><span class="keyword">let</span> index = tracks.index(<span class="keyword">where</span>: {<span class="keyword">return</span> $<span class="number">0</span> == selectedTrack})<span class="comment">// 上面获得的index是可选值，因此需要强制解析</span><span class="comment">// upTo 左闭右开</span><span class="keyword">let</span> prefixArray = tracks.<span class="keyword">prefix</span>(upTo: index!)<span class="keyword">let</span> suffixArray = tracks.suffix(from: index!)<span class="comment">// 最后注意组装的顺序</span><span class="keyword">let</span> arr = suffixArray + prefixArray</code></pre><p>这里的<a href="https://developer.apple.com/documentation/swift/array/1688966-index" target="_blank" rel="noopener">index</a>函数，声明是这样的： </p><pre><code class="swift"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(<span class="keyword">where</span> predicate: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">Int</span>?</code></pre><p>where后面是一个闭包，以<code>$0</code> 表示一个参数，预测参数和传入的元素是否匹配，匹配则返回<code>Int</code>，否则返回<code>nil</code>，所以最终的返回值是可选值 <code>Int?</code>。    </p><p>希望这个小的算法<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a> </sup> 可以运用到你的Application当中！</p><div class="footnotes"><ol><br>    <li class="footnote" id="fn:1"><br>        <p>快速掌握一门语言，比如Swift，勤加练习算法无疑是最好的方式！<a href="#fnref:1" title="footnote 在文末的标题"> </a></p><p><br>    </p></li><br>    <li class="footnote" id="fn:2"><br>        <p>在此之前，如果你不熟悉Array有哪些内置函数，不妨去看看<br>        <a href="https://developer.apple.com/documentation/swift/array" target="_blank">文档</a><br>        <a href="#fnref:2" title="footnote 在文末的标题"> </a></p><p><br>    </p></li><br></ol></div> <script type="text/javascript">    $.bigfoot();</script><script type="text/javascript">    var bigfoot = $.bigfoot({        deleteOnUnhover: false,        preventPageScroll: false,        hoverDelay: 250,        activateOnHover: true,    });</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有趣的 &lt;code&gt;Swift 3&lt;/code&gt; 算法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;code&gt;Youtube&lt;/code&gt;上看到Swift3 的一个小算法，觉得很有趣！介绍给大家～  &lt;/p&gt;
&lt;h4 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h4&gt;&lt;p&gt;现在打开网易云音乐，选取一个歌单打开，从中选取一首歌，点击播放。若是循环模式，那么播放歌曲的顺序应该是：当前这首歌 -&amp;gt; 下面的所有歌 -&amp;gt; 当前这首歌上面的歌。&lt;br&gt;抽象出来就是： 对于数组&lt;code&gt;[&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;]&lt;/code&gt;， 选取”c”，输出 &lt;code&gt;[ &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;]&lt;/code&gt; 。  &lt;/p&gt;
&lt;h4 id=&quot;实现1&quot;&gt;&lt;a href=&quot;#实现1&quot; class=&quot;headerlink&quot; title=&quot;实现1&quot;&gt;&lt;/a&gt;实现1&lt;/h4&gt;&lt;p&gt;新建Playground，GeneratePlayList&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://blog.x-fei.me/tags/swift/"/>
    
      <category term="algorithm" scheme="http://blog.x-fei.me/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>给Hexo添加Bigfoot</title>
    <link href="http://blog.x-fei.me/2017/09/02/%E7%BB%99Hexo%E6%B7%BB%E5%8A%A0Bigfoot/"/>
    <id>http://blog.x-fei.me/2017/09/02/给Hexo添加Bigfoot/</id>
    <published>2017-09-02T15:08:52.000Z</published>
    <updated>2017-09-04T01:58:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.bigfootjs.com/" target="_blank" rel="noopener">Bigfoot.js</a> 是一个很漂亮的footnote<a href="https://baike.baidu.com/item/%E8%84%9A%E6%B3%A8/17821082?fr=aladdin" target="_blank" rel="noopener">脚注</a>插件。我之前搭建Ghost博客的时候，在萌天的博客上有看到过，经过萌天介绍，认识了Bigfoot。现在将Bigfoot集成到我目前在用的hexo博客hiker主题中。<br><a id="more"></a></p><p>效果就是右边这个小气泡按钮啦，萌不萌？ <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a> </sup>   </p><p> <em>下面就为Hexo博客添加Bigfoot支持吧！</em></p><h3 id="下载所需文件"><a href="#下载所需文件" class="headerlink" title="下载所需文件"></a>下载所需文件</h3><p>Bigfoot依赖jquery，所以需要下载以下内容：<br><a href="http://www.bigfootjs.com/download/bigfoot.zip" target="_blank" rel="noopener">Bigfoot.js</a><br><a href="http://www.jq22.com/jquery-info122" target="_blank" rel="noopener">jquery</a><br>(这里jquery的版本要高于1.8，但是在用到高版本的jquery的时候，会出现bigfoot气泡样式不对的错误！)  </p><h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p>Hexo的一般theme的目录结构：<br><img src="/images/struct.png" alt="目录结构">  </p><p>将下载得到的 <code>bigfoot.min.js</code> 和 <code>jquery-2.0.3</code> 放入 <code>hiker</code>主题下 <code>source/js</code> 文件夹；<br>将下载得到的 <code>bigfoot-default.css</code> 放入<code>css</code> 文件夹。</p><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>打开<code>主题名/layout/_partial/head.ejs</code> ，在适当的位置添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- js(&apos;js/jquery-2.0.3.min.js&apos;) %&gt;</span><br><span class="line">&lt;%- js(&apos;js/bigfoot.min.js&apos;) %&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开根目录下面的<code>scaffolds</code>（模版文件夹）下的 <code>post.md</code> 文件，在最后添加：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    $.bigfoot();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var bigfoot = $.bigfoot(&#123;</span></span><br><span class="line"><span class="undefined">        deleteOnUnhover: false,</span></span><br><span class="line"><span class="undefined">        preventPageScroll: false,</span></span><br><span class="line"><span class="undefined">        hoverDelay: 250,</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里我没有把这些加入<code>ejs</code>模版文件中，出于两方面考虑，一方面bigfoot对气泡有很多额外的设置可以在这里添加，另一方面加入到什么地方都让我觉得不太优美，暂时没有找到合适的地方。  </p><p>保存，<code>hexo generate、 hexo server</code> 看一下本地的效果，没有问题的话，<code>deploy</code>到服务器！  </p><h3 id="使用Bigfoot"><a href="#使用Bigfoot" class="headerlink" title="使用Bigfoot"></a>使用Bigfoot</h3><p>Bigfoot 的使用时靠直接写HTML的，使用如下：<br>在新的post当中：<br><strong>在文章需要显示气泡处</strong>，添加：<br><code>&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt; &lt;/sup&gt;</code><br>其中数字1代表脚注序号。<br><strong>文章末尾处</strong>，添加：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footnotes"</span>&gt;</span><span class="tag">&lt;<span class="name">ol</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"footnote"</span> <span class="attr">id</span>=<span class="string">"fn:1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>footnote 里面要显示的内容<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#fnref:1"</span> <span class="attr">title</span>=<span class="string">"footnote 在文末的标题"</span>&gt;</span> ↩<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>序号要对应。  </p><p>好了，这个时候重新generate，应该会出现了！</p><div class="footnotes"><ol><br>    <li class="footnote" id="fn:1"><br>        <p>footnote 里面要显示的内容，有什么问题欢迎留言交流～ <a href="#fnref:1" title="footnote 在文末的标题"> </a></p><p><br>    </p></li><br></ol></div> <script type="text/javascript">    $.bigfoot();</script><script type="text/javascript">    var bigfoot = $.bigfoot({        deleteOnUnhover: false,        preventPageScroll: false,        hoverDelay: 250,    });</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.bigfootjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bigfoot.js&lt;/a&gt; 是一个很漂亮的footnote&lt;a href=&quot;https://baike.baidu.com/item/%E8%84%9A%E6%B3%A8/17821082?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;脚注&lt;/a&gt;插件。我之前搭建Ghost博客的时候，在萌天的博客上有看到过，经过萌天介绍，认识了Bigfoot。现在将Bigfoot集成到我目前在用的hexo博客hiker主题中。&lt;br&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://blog.x-fei.me/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Stay hungry, Stay Young</title>
    <link href="http://blog.x-fei.me/2017/08/29/Stay-hungry-Stay-foolish/"/>
    <id>http://blog.x-fei.me/2017/08/29/Stay-hungry-Stay-foolish/</id>
    <published>2017-08-29T11:59:27.000Z</published>
    <updated>2017-09-03T12:54:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>忘记第几次重新搭建博客了，之前重装系统、换笔记本或者服务器到期，（其实更关键的是博客更新太少了）。<br>现在重新开张，希望有缘到我这个小站来的你，能收获一些东西！：）  </p><p>Stay hungry, Stay Young!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;忘记第几次重新搭建博客了，之前重装系统、换笔记本或者服务器到期，（其实更关键的是博客更新太少了）。&lt;br&gt;现在重新开张，希望有缘到我这个小站来的你，能收获一些东西！：）  &lt;/p&gt;
&lt;p&gt;Stay hungry, Stay Young!&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="think" scheme="http://blog.x-fei.me/tags/think/"/>
    
  </entry>
  
</feed>
